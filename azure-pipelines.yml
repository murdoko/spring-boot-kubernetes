pool:
  vmImage: ubuntu-latest

stages:
- stage: SAST
  jobs:
  - job: Job
    displayName: 'SAST SonarCloud'
    steps:
      - task: Maven@4
        inputs:
          mavenPomFile: 'pom.xml'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          javaHomeOption: 'JDKVersion'
          mavenVersionOption: 'Default'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
        displayName: Maven - Genera Build

      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'murdoko'
          projectKey: 'murdoko_spring-boot-kubernetes'
          projectName: 'spring-boot-kubernetes'
        displayName: SonarCloud - Prepare
      
      - task: Maven@4
        inputs:
          mavenPomFile: 'pom.xml'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          javaHomeOption: 'JDKVersion'
          mavenVersionOption: 'Default'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: true
          sqMavenPluginVersionChoice: 'latest'
        displayName: Maven - Análisis SonarCloud
          
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'
        displayName: SonarCloud - Publish

      - task: sonarcloud-buildbreaker@2
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'murdoko'
        displayName: SonarCloud - BuilBreaker

- stage: SCA
  jobs:
  - job: Job
    displayName: 'SCA Dependency check'
    steps:
      - task: Maven@4
        inputs:
          mavenPomFile: 'pom.xml'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          javaHomeOption: 'JDKVersion'
          mavenVersionOption: 'Default'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
        displayName: Maven - Genera Build
      - script: |
          echo "Se realiza una búsqueda para identificar donde queda el .jar"
          find $(Build.SourcesDirectory) -name "*.jar"
        displayName: Script - Busca archivo .jar
      - task: dependency-check-build-task@6
        inputs:
          projectName: 'spring-boot-kubernetes'
          scanPath: '$(Build.SourcesDirectory)/target'
          format: 'JSON'
          reportsDirectory: 'reporte'
      - script: |
          echo "Se analiza el reporte generado en formato JSON en busca de vulnerabilidades de tipo HIGH o HIGHEST"
          echo "Ubicación del reporte: $(Build.SourcesDirectory)/reporte/dependency-check-report.json"
          if [ $(grep -Po '"confidence":.*?[^\\]",' $(Build.SourcesDirectory)/reporte/dependency-check-report.json | grep '"HIGH"\|"HIGHEST"' | wc -l) -gt 0 ]
          then
            echo "Atención! Hay vulnerabilidades de tipo ALTA (HIGH o HIGHEST)"
            #exit 1
          else
            echo "OK! No se encontraron vulnerabilidades de tipo ALTA (HIGH o HIGHEST)"
          fi
        displayName: Script - Revisa vulnerabilidades en reporte

- stage: DAST
  jobs:
  - job: Job
    displayName: 'DAST Container Security'
    steps:
      - task: Maven@4
        inputs:
          mavenPomFile: 'pom.xml'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          javaHomeOption: 'JDKVersion'
          mavenVersionOption: 'Default'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
        displayName: Maven - Genera Build

      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce'
        displayName: Docker Installer

      - task: Docker@2
        inputs:
          containerRegistry: 'DockerConn'
          command: 'login'
        displayName: Docker Login

      - task: Docker@2
        inputs:
          containerRegistry: 'DockerConn'
          command: 'build'
          repository: 'murdoko/spring-boot-kubernetes'
          Dockerfile: '**/Dockerfile'
          tags: 'latest'
        displayName: Build Image

      - script: |
            sudo apt-get install -y rpm
            wget https://github.com/aquasecurity/trivy/releases/download/v0.27.1/trivy_0.27.1_Linux-64bit.deb
            sudo dpkg -i trivy_0.27.1_Linux-64bit.deb
            trivy image --exit-code 1 --severity HIGH,CRITICAL murdoko/spring-boot-kubernetes:latest
        displayName: Trivi Image Scan

      - task: Docker@2
        inputs:
          containerRegistry: 'DockerConn'
          repository: 'murdoko/spring-boot-kubernetes'
          command: 'push'
          tags: 'latest'
        displayName: Docker Push

